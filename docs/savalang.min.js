class Token{constructor(e,t){this.type=e,this.value=t}}class Lexer{constructor(e){this.code=e,this.position=0,this.currentChar=this.code[this.position]}advance(){this.position++,this.currentChar=this.code[this.position]}isLetter(e){return/[a-zA-Z]/.test(e)}isDigit(e){return/[0-9]/.test(e)}getNextToken(){for(;void 0!==this.currentChar;){if(/\s/.test(this.currentChar)){this.advance();continue}if("#"===this.currentChar){for(;"\n"!==this.currentChar&&void 0!==this.currentChar;)this.advance();continue}if("!"===this.currentChar){let e=this.currentChar;return this.advance(),new Token("LABEL",e)}if("<"===this.currentChar){if(this.advance(),"<"===this.currentChar)return this.advance(),new Token("OUTPUT","<<");if("="===this.currentChar)return this.advance(),new Token("LTE","<=");return new Token("LT","<")}if(">"===this.currentChar){if(this.advance(),"="===this.currentChar)return this.advance(),new Token("GTE",">=");return new Token("GT",">")}if(":"===this.currentChar){if(this.advance(),"="===this.currentChar)return this.advance(),new Token("ASSIGN",":=");return new Token("COLON",":")}if("="===this.currentChar)return this.advance(),new Token("ASSIGN","=");if("+"===this.currentChar){if(this.advance(),"+"===this.currentChar)return this.advance(),new Token("INCREMENT","++");if("="===this.currentChar)return this.advance(),new Token("INCREASEBY","+=");if(this.isDigit(this.currentChar)){let t="+";for(;this.isDigit(this.currentChar);)t+=this.currentChar,this.advance();return new Token("NUMBER",parseInt(t))}return new Token("PLUS","+")}if("-"===this.currentChar){if(this.advance(),"-"===this.currentChar)return this.advance(),new Token("DECREMENT","--");if("="===this.currentChar)return this.advance(),new Token("DECREASEBY","-=");if(this.isDigit(this.currentChar)){let r="-";for(;this.isDigit(this.currentChar);)r+=this.currentChar,this.advance();return new Token("NUMBER",parseInt(r))}return new Token("MINUS","-")}if(/[a-zA-Z]/.test(this.currentChar)){let a="";for(;this.isLetter(this.currentChar)||this.isDigit(this.currentChar);)a+=this.currentChar,this.advance();if("sava"===a)return new Token("SAVA",a);if("as"===a)return new Token("AS",a);if("number"===a)return new Token("NUMBER_TYPE",a);if("string"===a)return new Token("STRING_TYPE",a);if("goto"===a)return new Token("GOTO",a);if("if"===a)return new Token("IF",a);if("then"===a)return new Token("THEN",a);return new Token("IDENTIFIER",a)}if(this.isDigit(this.currentChar)){let i="";for(;this.isDigit(this.currentChar);)i+=this.currentChar,this.advance();return new Token("NUMBER",parseInt(i))}if('"'===this.currentChar){let n="";for(this.advance();'"'!==this.currentChar&&void 0!==this.currentChar;)n+=this.currentChar,this.advance();return this.advance(),new Token("STRING",n)}throw Error(`Invalid character: ${this.currentChar}`)}return new Token("EOF",null)}}class Parser{constructor(e){this.lexer=e,this.currentToken=this.lexer.getNextToken()}eat(e){if(this.currentToken.type===e)this.currentToken=this.lexer.getNextToken();else throw Error(`Unexpected token: ${this.currentToken.type}. Expected ${e}.`)}variableDeclaration(){this.eat("SAVA");let e=this.currentToken.value;this.eat("IDENTIFIER"),this.eat("AS");let t=this.currentToken.value;if("number"==t)this.eat("NUMBER_TYPE");else if("string"==t)this.eat("STRING_TYPE");else throw Error(`Unknown data type: ${t}`);return{type:"VariableDeclaration",variableName:e,variableType:t}}assignmentStatement(){let e=this.currentToken.value;this.eat("IDENTIFIER");let t=this.currentToken.value;if("NUMBER"===this.currentToken.type)return this.eat("NUMBER"),{type:"AssignmentStatement",variableName:e,value:parseInt(t),variableType:"number"};if("STRING"===this.currentToken.type)return this.eat("STRING"),{type:"AssignmentStatement",variableName:e,value:t,variableType:"string"};if("IDENTIFIER"===this.currentToken.type){let r=this.currentToken.value;return this.eat("IDENTIFIER"),{type:"AssignmentStatement",variableName:e,value:t,variableType:r}}throw Error(`Invalid assignment value: ${t}`)}outputStatement(){if(this.eat("OUTPUT"),"NUMBER"===this.currentToken.type){let e=this.currentToken.value;return this.eat("NUMBER"),{type:"OutputStatement",value:e}}if("STRING"===this.currentToken.type){let t=this.currentToken.value;return this.eat("STRING"),{type:"OutputStatement",value:t}}{let r=this.currentToken.value;return this.eat("IDENTIFIER"),{type:"OutputStatement",value:r,isVariable:!0}}}labelStatement(){this.eat("LABEL");let e=this.currentToken.value;return this.eat("IDENTIFIER"),this.eat("COLON"),{type:"LabelStatement",labelName:e}}gotoStatement(){this.eat("GOTO");let e=this.currentToken.value;return this.eat("IDENTIFIER"),{type:"GotoStatement",labelName:e}}ifStatement(){this.eat("IF");let e=this.currentToken.value;this.eat("IDENTIFIER");let t=this.currentToken.value;if(">"===t)this.eat("GT");else if(">="===t)this.eat("GTE");else if("<"===t)this.eat("LT");else if("<="===t)this.eat("LTE");else if("="===t)this.eat("ASSIGN");else throw Error(`Invalid operator: ${t}`);let r=this.currentToken.value;if("NUMBER"===this.currentToken.type){this.eat("NUMBER"),this.eat("THEN"),this.eat("GOTO");let a=this.currentToken.value;return this.eat("IDENTIFIER"),{type:"IfStatement",variableName:e,operator:t,value:parseInt(r),label:a}}if("STRING"===this.currentToken.type){this.eat("STRING"),this.eat("THEN"),this.eat("GOTO");let i=this.currentToken.value;return this.eat("IDENTIFIER"),{type:"IfStatement",variableName:e,operator:t,value:r,label:i}}if("IDENTIFIER"===this.currentToken.type){this.eat("IDENTIFIER"),this.eat("THEN"),this.eat("GOTO");let n=this.currentToken.value;return this.eat("IDENTIFIER"),{type:"IfStatement",variableName:e,operator:t,value:r,label:n,isVariable:!0}}throw Error(`Invalid if condition value: ${r}`)}incrementStatement(){let e=this.currentToken.value;return this.eat("IDENTIFIER"),{type:"IncrementStatement",variableName:e}}decrementStatement(){let e=this.currentToken.value;return this.eat("IDENTIFIER"),{type:"DecrementStatement",variableName:e}}increaseByStatement(){let e=this.currentToken.value;this.eat("IDENTIFIER");let t=this.currentToken.type,r;return"NUMBER"===t?(r=this.currentToken.value,this.eat("NUMBER")):"STRING"===t?(r=this.currentToken.value,this.eat("STRING")):(r=this.currentToken.value,this.eat("IDENTIFIER")),{type:"IncreaseByStatement",variableName:e,displaceValue:r,variableType:t}}decreaseByStatement(){let e=this.currentToken.value;this.eat("IDENTIFIER");let t=this.currentToken.type,r;return"NUMBER"===t?(r=this.currentToken.value,this.eat("NUMBER")):(r=this.currentToken.value,this.eat("IDENTIFIER")),{type:"DecreaseByStatement",variableName:e,displaceValue:r,variableType:t}}statement(){if("SAVA"===this.currentToken.type)return this.variableDeclaration();if("IDENTIFIER"===this.currentToken.type){let e=this.lexer.getNextToken();if("ASSIGN"===e.type)return this.assignmentStatement();if("OUTPUT"===e.type)return this.outputStatement();if("INCREMENT"===e.type)return this.incrementStatement();else if("DECREMENT"===e.type)return this.decrementStatement();else if("INCREASEBY"===e.type)return this.increaseByStatement();else if("DECREASEBY"===e.type)return this.decreaseByStatement();else throw Error(`Invalid statement: ${e.type}`)}if("LABEL"===this.currentToken.type)return this.labelStatement();if("GOTO"===this.currentToken.type)return this.gotoStatement();if("IF"===this.currentToken.type)return this.ifStatement();else if("OUTPUT"===this.currentToken.type)return this.outputStatement();else throw Error(`Invalid statement: ${this.currentToken.type}`)}program(){let e=[];for(;"EOF"!==this.currentToken.type;)e.push(this.statement());return{type:"Program",statements:e}}parse(){return this.program()}}class Executor{constructor(e){this.ast=e,this.variables={},this.output=[],this.currentIndex=0}execute(){let e=0;for(;e<this.ast.statements.length;){let t=this.ast.statements[e],r=this.executeStatement(t);void 0===r?e++:e=r,this.currentIndex=e}return this.output}executeStatement(e){if("VariableDeclaration"===e.type)this.executeVariableDeclaration(e);else if("AssignmentStatement"===e.type)this.executeAssignmentStatement(e);else if("OutputStatement"===e.type)this.executeOutputStatement(e);else if("LabelStatement"===e.type);else if("GotoStatement"===e.type)return this.executeGotoStatement(e);else if("IfStatement"===e.type)return this.executeIfStatement(e);else if("IncrementStatement"===e.type)return this.executeIncrementStatement(e);else if("DecrementStatement"===e.type)return this.executeDecrementStatement(e);else if("IncreaseByStatement"===e.type)return this.executeIncreaseByStatement(e);else if("DecreaseByStatement"===e.type)return this.executeDecreaseByStatement(e);else throw Error(`Invalid statement type: ${e.type}`)}executeVariableDeclaration(e){let{variableName:t,variableType:r}=e;if("number"===r)this.variables[t]={value:0,variableType:r};else if("string"===r)this.variables[t]={value:"",variableType:r};else throw Error(`Invalid variable type: ${r}`)}executeAssignmentStatement(e){let{variableName:t,value:r,variableType:a}=e;if(void 0===this.variables[t])throw Error(`Variable not found: ${t}`);if(!["number","string"].includes(a)){if(void 0===this.variables[a])throw Error(`Variable not found: ${a}`);if(this.variables[t].variableType===this.variables[a].variableType){this.variables[t]={value:this.variables[a].value,variableType:this.variables[t].variableType};return}throw Error(`Unexpected data type: ${this.variables[a].variableType}. Expected ${this.variables[t].variableType}.`)}if(this.variables[t].variableType!=a)throw Error(`Unexpected data type: ${a}. Expected ${this.variables[t].variableType}.`);this.variables[t]={value:r,variableType:a}}executeOutputStatement(e){let{value:t,isVariable:r}=e;r?this.output.push(this.variables[t].value):this.output.push(t)}executeGotoStatement(e){let{labelName:t}=e;for(let r=0;r<this.ast.statements.length;r++)if("LabelStatement"===this.ast.statements[r].type&&this.ast.statements[r].labelName===t)return r;throw Error(`Label not found: ${t}`)}executeIfStatement(e){let{variableName:t,operator:r,value:a,isVariable:i}=e,n=this.variables[t].value,s;if(i){if(void 0===this.variables[a])throw Error(`Variable not found: ${t}`);a=this.variables[a].value}if(">"===r)s=n>a;else if(">="===r)s=n>=a;else if("<"===r)s=n<a;else if("<="===r)s=n<=a;else if("="===r)s=n===a;else throw Error(`Invalid operator: ${r}`);if(!s)return;let h=-1;for(var u=0;u<this.ast.statements.length;u++)if("LabelStatement"===this.ast.statements[u].type&&this.ast.statements[u].labelName===e.label){h=u;break}if(-1===h)throw Error(`Label not found: ${e.label}`);return h}executeIncrementStatement(e){let{variableName:t}=e;if(void 0===this.variables[t])throw Error(`Variable not found: ${t}`);if("number"!=this.variables[t].variableType)throw Error(`${t} is not a number.`);this.variables[t]={value:this.variables[t].value+1,variableType:this.variables[t].variableType}}executeDecrementStatement(e){let{variableName:t}=e;if(void 0===this.variables[t])throw Error(`Variable not found: ${t}`);if("number"!=this.variables[t].variableType)throw Error(`${t} is not a number.`);this.variables[t]={value:this.variables[t].value-1,variableType:this.variables[t].variableType}}executeIncreaseByStatement(e){let{variableName:t,displaceValue:r,variableType:a}=e,i=this.variables[t];if(void 0===i)throw Error(`Variable not found: ${t}`);if("IDENTIFIER"===a){if(void 0===this.variables[r])throw Error(`Variable not found: ${r}`);if(this.variables[r].variableType=i.variableType){this.variables[t]={value:i.value+this.variables[r].value,variableType:i.variableType};return}throw Error(`Unexpected data type: ${this.variables[r].variableType}. Expected ${i.variableType}.`)}let n="string";if("number"===a&&(n="number",i.variableType!=n))throw Error(`Unexpected data type: ${n}. Expected ${i.variableType}.`);this.variables[t]={value:i.value+r,variableType:n}}executeDecreaseByStatement(e){let{variableName:t,displaceValue:r,variableType:a}=e,i=this.variables[t];if(void 0===i)throw Error(`Variable not found: ${t}`);if("IDENTIFIER"===a){if(void 0===this.variables[r])throw Error(`Variable not found: ${r}`);if(this.variables[r].variableType=i.variableType){this.variables[t]={value:i.value-this.variables[r].value,variableType:i.variableType};return}throw Error(`Unexpected data type: ${this.variables[r].variableType}. Expected ${i.variableType}.`)}let n="number";if(i.variableType!=n)throw Error(`Unexpected data type: ${n}. Expected ${i.variableType}.`);this.variables[t]={value:i.value-r,variableType:n}}}class SavaInterpreter{constructor(){console.log("Sava-Lang v0 (c) 2023 Ess2021"),this.lexer=null,this.parser=null,this.executor=null,this.outputs=[],this.errMsg=[]}run(e){try{this.lexer=new Lexer(e),this.parser=new Parser(this.lexer),this.executor=new Executor(this.parser.parse());let t=this.executor.execute();for(var r of(this.outputs=t,t))console.log(r)}catch(a){try{this.errMsg.push("Sava-Lang Runtime Error:"),this.errMsg.push(`  ${a.message}`),null!=this.executor&&this.errMsg.push(`  at line ${this.executor.currentIndex+1}`)}catch(i){this.errMsg=[],this.errMsg.push("Sava-Lang Parse Error:"),this.errMsg.push(`  ${i.message}`)}throw Error("Sava-Lang Runtime Error")}}}